package com.yourcompany.mortgage.mapper;

import com.yourcompany.mortgage.dto.*;
import com.yourcompany.mortgage.model.*;
import org.mapstruct.*;

/**
 * Mapper interface for converting between DTOs and Entities
 * Generated by MapStruct for efficient object mapping
 */
@Mapper(componentModel = "spring", 
        nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE,
        unmappedTargetPolicy = ReportingPolicy.IGNORE,
        uses = {})
public interface LoanApplicationMapper {

    // Main application mapping
    LoanApplication toEntity(LoanApplicationDTO dto);
    LoanApplicationDTO toDTO(LoanApplication entity);

    // Property mapping
    Property toEntity(PropertyDTO dto);
    PropertyDTO toDTO(Property entity);

    // Borrower mapping
    Borrower toEntity(BorrowerDTO dto);
    BorrowerDTO toDTO(Borrower entity);

    // Employment mapping
    Employment toEntity(EmploymentDTO dto);
    EmploymentDTO toDTO(Employment entity);

    // Income source mapping
    IncomeSource toEntity(IncomeSourceDTO dto);
    IncomeSourceDTO toDTO(IncomeSource entity);

    // Residence mapping
    Residence toEntity(ResidenceDTO dto);
    ResidenceDTO toDTO(Residence entity);

    // Liability mapping
    Liability toEntity(LiabilityDTO dto);
    LiabilityDTO toDTO(Liability entity);

    // REO Property mapping
    REOProperty toEntity(REOPropertyDTO dto);
    REOPropertyDTO toDTO(REOProperty entity);

    // Declaration mapping
    Declaration toEntity(DeclarationDTO dto);
    DeclarationDTO toDTO(Declaration entity);

    // List mappings
    @IterableMapping(elementTargetType = Borrower.class)
    java.util.List<Borrower> toEntityList(java.util.List<BorrowerDTO> dtos);

    @IterableMapping(elementTargetType = BorrowerDTO.class)
    java.util.List<BorrowerDTO> toDTOList(java.util.List<Borrower> entities);

    @IterableMapping(elementTargetType = Employment.class)
    java.util.List<Employment> toEmploymentEntityList(java.util.List<EmploymentDTO> dtos);

    @IterableMapping(elementTargetType = EmploymentDTO.class)
    java.util.List<EmploymentDTO> toEmploymentDTOList(java.util.List<Employment> entities);

    @IterableMapping(elementTargetType = IncomeSource.class)
    java.util.List<IncomeSource> toIncomeSourceEntityList(java.util.List<IncomeSourceDTO> dtos);

    @IterableMapping(elementTargetType = IncomeSourceDTO.class)
    java.util.List<IncomeSourceDTO> toIncomeSourceDTOList(java.util.List<IncomeSource> entities);

    @IterableMapping(elementTargetType = Residence.class)
    java.util.List<Residence> toResidenceEntityList(java.util.List<ResidenceDTO> dtos);

    @IterableMapping(elementTargetType = ResidenceDTO.class)
    java.util.List<ResidenceDTO> toResidenceDTOList(java.util.List<Residence> entities);

    @IterableMapping(elementTargetType = Liability.class)
    java.util.List<Liability> toLiabilityEntityList(java.util.List<LiabilityDTO> dtos);

    @IterableMapping(elementTargetType = LiabilityDTO.class)
    java.util.List<LiabilityDTO> toLiabilityDTOList(java.util.List<Liability> entities);

    @IterableMapping(elementTargetType = REOProperty.class)
    java.util.List<REOProperty> toREOPropertyEntityList(java.util.List<REOPropertyDTO> dtos);

    @IterableMapping(elementTargetType = REOPropertyDTO.class)
    java.util.List<REOPropertyDTO> toREOPropertyDTOList(java.util.List<REOProperty> entities);

    // Note: Complex relationship mappings will be handled in service layer
    // MapStruct works best with simple DTO to Entity mappings
}
